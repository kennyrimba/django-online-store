name: Django Store CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    # services:
    #   mysql:
    #     image: mysql:8.0
    #     env:
    #       MYSQL_DATABASE: ddice_db
    #       MYSQL_USER: django
    #       MYSQL_PASSWORD: django_password
    #       MYSQL_ROOT_PASSWORD: root_password
    #     ports:
    #       - 3306:3306
    #     options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  build-and-push:
    needs: test
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/django-online-store:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/django-online-store:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/django-online-store:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/django-online-store:buildcache,mode=max
        platforms: linux/amd64
        provenance: false

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Update kube config
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        
    - name: Verify Kubernetes connection
      run: |
        $env:KUBECONFIG = "$(Get-Location)\kubeconfig.yaml"
        kubectl cluster-info
      shell: powershell
        
    - name: Deploy to Kubernetes
      run: |
        $env:KUBECONFIG = "$(Get-Location)\kubeconfig.yaml"
        kubectl apply -f k8s/cutie-ecommerce.yaml
        kubectl rollout restart deployment frontend-backend
        kubectl rollout restart deployment mysql
      shell: powershell
